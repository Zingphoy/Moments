// Code generated by MockGen. DO NOT EDIT.
// Source: Moments/model (interfaces: DatabaseEngine)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockDatabaseEngine is a mock of DatabaseEngine interface
type MockDatabaseEngine struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseEngineMockRecorder
}

// MockDatabaseEngineMockRecorder is the mock recorder for MockDatabaseEngine
type MockDatabaseEngineMockRecorder struct {
	mock *MockDatabaseEngine
}

// NewMockDatabaseEngine creates a new mock instance
func NewMockDatabaseEngine(ctrl *gomock.Controller) *MockDatabaseEngine {
	mock := &MockDatabaseEngine{ctrl: ctrl}
	mock.recorder = &MockDatabaseEngineMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDatabaseEngine) EXPECT() *MockDatabaseEngineMockRecorder {
	return m.recorder
}

// Connect mocks base method
func (m *MockDatabaseEngine) Connect() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connect")
	ret0, _ := ret[0].(error)
	return ret0
}

// Connect indicates an expected call of Connect
func (mr *MockDatabaseEngineMockRecorder) Connect() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockDatabaseEngine)(nil).Connect))
}

// Disconnect mocks base method
func (m *MockDatabaseEngine) Disconnect() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Disconnect")
	ret0, _ := ret[0].(error)
	return ret0
}

// Disconnect indicates an expected call of Disconnect
func (mr *MockDatabaseEngineMockRecorder) Disconnect() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Disconnect", reflect.TypeOf((*MockDatabaseEngine)(nil).Disconnect))
}

// Insert mocks base method
func (m *MockDatabaseEngine) Insert(arg0 string, arg1 []interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert
func (mr *MockDatabaseEngineMockRecorder) Insert(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockDatabaseEngine)(nil).Insert), arg0, arg1)
}

// Query mocks base method
func (m *MockDatabaseEngine) Query(arg0 string, arg1 map[string]interface{}) ([]map[string]interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Query", arg0, arg1)
	ret0, _ := ret[0].([]map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Query indicates an expected call of Query
func (mr *MockDatabaseEngineMockRecorder) Query(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockDatabaseEngine)(nil).Query), arg0, arg1)
}

// Remove mocks base method
func (m *MockDatabaseEngine) Remove(arg0 string, arg1 map[string]interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove
func (mr *MockDatabaseEngineMockRecorder) Remove(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockDatabaseEngine)(nil).Remove), arg0, arg1)
}

// Update mocks base method
func (m *MockDatabaseEngine) Update(arg0 string, arg1, arg2 map[string]interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockDatabaseEngineMockRecorder) Update(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockDatabaseEngine)(nil).Update), arg0, arg1, arg2)
}
