// Code generated by MockGen. DO NOT EDIT.
// Source: Moments/model (interfaces: ArticleModel)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockArticleModel is a mock of ArticleModel interface
type MockArticleModel struct {
	ctrl     *gomock.Controller
	recorder *MockArticleModelMockRecorder
}

// MockArticleModelMockRecorder is the mock recorder for MockArticleModel
type MockArticleModelMockRecorder struct {
	mock *MockArticleModel
}

// NewMockArticleModel creates a new mock instance
func NewMockArticleModel(ctrl *gomock.Controller) *MockArticleModel {
	mock := &MockArticleModel{ctrl: ctrl}
	mock.recorder = &MockArticleModelMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockArticleModel) EXPECT() *MockArticleModelMockRecorder {
	return m.recorder
}

// AddArticle mocks base method
func (m *MockArticleModel) AddArticle() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddArticle")
	ret0, _ := ret[0].(error)
	return ret0
}

// AddArticle indicates an expected call of AddArticle
func (mr *MockArticleModelMockRecorder) AddArticle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddArticle", reflect.TypeOf((*MockArticleModel)(nil).AddArticle))
}

// DeleteArticleByUidAid mocks base method
func (m *MockArticleModel) DeleteArticleByUidAid() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteArticleByUidAid")
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteArticleByUidAid indicates an expected call of DeleteArticleByUidAid
func (mr *MockArticleModelMockRecorder) DeleteArticleByUidAid() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteArticleByUidAid", reflect.TypeOf((*MockArticleModel)(nil).DeleteArticleByUidAid))
}

// DeleteArticleSoftByUidAid mocks base method
func (m *MockArticleModel) DeleteArticleSoftByUidAid() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteArticleSoftByUidAid")
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteArticleSoftByUidAid indicates an expected call of DeleteArticleSoftByUidAid
func (mr *MockArticleModelMockRecorder) DeleteArticleSoftByUidAid() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteArticleSoftByUidAid", reflect.TypeOf((*MockArticleModel)(nil).DeleteArticleSoftByUidAid))
}

// GetArticleDatabase mocks base method
func (m *MockArticleModel) GetArticleDatabase() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArticleDatabase")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetArticleDatabase indicates an expected call of GetArticleDatabase
func (mr *MockArticleModelMockRecorder) GetArticleDatabase() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArticleDatabase", reflect.TypeOf((*MockArticleModel)(nil).GetArticleDatabase))
}

// GetArticleDetailByAid mocks base method
func (m *MockArticleModel) GetArticleDetailByAid() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArticleDetailByAid")
	ret0, _ := ret[0].(error)
	return ret0
}

// GetArticleDetailByAid indicates an expected call of GetArticleDetailByAid
func (mr *MockArticleModelMockRecorder) GetArticleDetailByAid() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArticleDetailByAid", reflect.TypeOf((*MockArticleModel)(nil).GetArticleDetailByAid))
}

// IsArticleExist mocks base method
func (m *MockArticleModel) IsArticleExist() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsArticleExist")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsArticleExist indicates an expected call of IsArticleExist
func (mr *MockArticleModelMockRecorder) IsArticleExist() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsArticleExist", reflect.TypeOf((*MockArticleModel)(nil).IsArticleExist))
}
