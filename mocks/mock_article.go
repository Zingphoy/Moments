// Code generated by MockGen. DO NOT EDIT.
// Source: Moments/model (interfaces: ArticleHandler)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockArticleHandler is a mock of ArticleHandler interface
type MockArticleHandler struct {
	ctrl     *gomock.Controller
	recorder *MockArticleHandlerMockRecorder
}

// MockArticleHandlerMockRecorder is the mock recorder for MockArticleHandler
type MockArticleHandlerMockRecorder struct {
	mock *MockArticleHandler
}

// NewMockArticleHandler creates a new mock instance
func NewMockArticleHandler(ctrl *gomock.Controller) *MockArticleHandler {
	mock := &MockArticleHandler{ctrl: ctrl}
	mock.recorder = &MockArticleHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockArticleHandler) EXPECT() *MockArticleHandlerMockRecorder {
	return m.recorder
}

// AddArticle mocks base method
func (m *MockArticleHandler) AddArticle() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddArticle")
	ret0, _ := ret[0].(error)
	return ret0
}

// AddArticle indicates an expected call of AddArticle
func (mr *MockArticleHandlerMockRecorder) AddArticle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddArticle", reflect.TypeOf((*MockArticleHandler)(nil).AddArticle))
}

// DeleteArticle mocks base method
func (m *MockArticleHandler) DeleteArticle() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteArticle")
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteArticle indicates an expected call of DeleteArticle
func (mr *MockArticleHandlerMockRecorder) DeleteArticle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteArticle", reflect.TypeOf((*MockArticleHandler)(nil).DeleteArticle))
}

// DeleteArticleSoft mocks base method
func (m *MockArticleHandler) DeleteArticleSoft() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteArticleSoft")
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteArticleSoft indicates an expected call of DeleteArticleSoft
func (mr *MockArticleHandlerMockRecorder) DeleteArticleSoft() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteArticleSoft", reflect.TypeOf((*MockArticleHandler)(nil).DeleteArticleSoft))
}

// GetArticleDatabase mocks base method
func (m *MockArticleHandler) GetArticleDatabase() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArticleDatabase")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetArticleDatabase indicates an expected call of GetArticleDatabase
func (mr *MockArticleHandlerMockRecorder) GetArticleDatabase() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArticleDatabase", reflect.TypeOf((*MockArticleHandler)(nil).GetArticleDatabase))
}

// GetArticleDetail mocks base method
func (m *MockArticleHandler) GetArticleDetail() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArticleDetail")
	ret0, _ := ret[0].(error)
	return ret0
}

// GetArticleDetail indicates an expected call of GetArticleDetail
func (mr *MockArticleHandlerMockRecorder) GetArticleDetail() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArticleDetail", reflect.TypeOf((*MockArticleHandler)(nil).GetArticleDetail))
}

// IsArticleExist mocks base method
func (m *MockArticleHandler) IsArticleExist() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsArticleExist")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsArticleExist indicates an expected call of IsArticleExist
func (mr *MockArticleHandlerMockRecorder) IsArticleExist() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsArticleExist", reflect.TypeOf((*MockArticleHandler)(nil).IsArticleExist))
}
